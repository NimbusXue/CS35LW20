1.1 
  1.emacs SPC exer1.html ENTER
  2.C-M-s HTML ENTER
  3.C-M-s scavenger M-b
  4.C-M-s self-referential M-b M-b
  5.C-M-s arrow M-b
  6.C-e 
  7.C-a
  10.C-x C-c
1.2 
  1.emacs exer2.html
  2.M-g M-g 19 enter
   C-k C-k
  3.C-M-s DELETE-ME DELETE-ME DELETE-ME
   C-a
   C-k C-k
  4.C-M-s https://en.wikipedia.org/wiki/HTML_comment#Comments
   C-M-s
   C-a
   C-k
   C-k
   C-k
   C-p
   C-k
   C-k
  5.C-M-s <!
   C-b C-b
   M-z  >
   C-M-s <!
   C-a
   C-k  C-k  C-k  C-k  C-k  C-k  C-k
   C-M-s <!
   C-a 
   C-k
1.3 
  1.emacs exer3.html
  2.C-M-s Assignment 1 ENTER DEL 42
    C-M-s Assignment 1 ENTER DEL 42
  3.C-M-s UTF-8 enter M-DEL M-DEL US-ASCII
  4.C-M-r [^[:ascii:]] C-a C-k
  5.C-M-s </ol> ENTER ENTER
  6.C-x C-c
1.4
   1.cat exer2.html exer2.diff >exer4.html ENTER
   2. emacs exer4.html 
   3. M-> C-p C-p C-@ C-n C-n M-w M-g M-g 451 C-y C-d
      M-g M-g 460 M-x set-mark-command C-n C-n C-n M-w M-g M-g 19 C-y DEL
      M-g M-g 469 M-x set-mark-command C-n M-w M-g M-g 131 C-y DEL
      M-g M-g 478 M-x set-mark-command C-n C-n C-n M-w M-g M-g 387 C-y DEL C-n DEL
      M-g M-g 491 M-f M-f M-f M-f M-x set-mark-command M-f C-b C-b C-b C-b M-w M-g M-g 433 
      M-f M-f M-f M-f C-y M-g M-g 492 M-x set-mark-command C-n C-n C-n C-n M-w M-g M-g 434
      C-y DEL 
   5. M-g M-g 457 M-x set-mark-command M-> C-w
   6. C-x u
   7.M-g M-g 457 M-x set-mark-command  M-> M-; 
   8. 7 instances M-x replace-string <ol> ENTER <oL>
   9.diff -u exer1.html exer4.html >exer4.diff
1.5 
   1.C-x d ~ ENTER + junk
   2.C-x d junk ENTER C-x C-f hello.c ENTER
   3.M-x compile gcc hello.c -o hello
   4.C-x b hello-out ENTER C-u M-! ./hello
   EOF on input
1.6 
   1.emacs C-x b ENTER most-negative-fixnum C-j most-positive-fixnum C-j
   
   2.(format "%x" most-positive-fixnum)
   "1fffffffffffffff"   the most positive possible
   (format "%x" most-negative-fixnum)
   "2000000000000000"   the most negative possible 
  
   3.(random "705-142-227")  C-j
   1987481534054311505
   4.(setq x (random))    C-j
     313792778482723032
     (setq y (random))    C-j
     1131160127314665919
   5. (setq p (* x y))  C-j
     p=2207473323677241640
     (logand p most-positive-fixnum) C-j
     r=2207473323677241640
   6.(setq x (random)) C-j
     1871591870741213770
     (setq y (random)) C-j
     -960232938556578144
     (setq p (* x y)) C-j
     1537945779037760064
     (logand p most-positive-fixnum) C-j
     1537945779037760064
   7.   They are not truly random because they are actually determined by an inner algorithm and  the number generated by an algorithm cannot be truly random.
   
   8. The value of the random number ranges from -2305843009213693952 to 2305843009213693951 which has 2 to the power of 62 of possible values. while their product actually have approximately  2 to the power of 123 possible values. The probability that the product lies in the non overflow range is round 1 over 2 to the power of 61, which is approximately 0.  
   
     

















   